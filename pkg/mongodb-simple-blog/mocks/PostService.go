// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	component "github.com/godome/godome/pkg/component"
	config "github.com/godome/godome/pkg/config"

	logger "github.com/godome/godome/pkg/logger"

	mock "github.com/stretchr/testify/mock"

	post "github.com/godome/examples/pkg/mongodb-simple-blog/blog/post"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *PostService) Config() config.Config {
	ret := _m.Called()

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Config)
		}
	}

	return r0
}

// CreatePost provides a mock function with given fields: name, description
func (_m *PostService) CreatePost(name string, description string) (*post.PostEntity, error) {
	ret := _m.Called(name, description)

	var r0 *post.PostEntity
	if rf, ok := ret.Get(0).(func(string, string) *post.PostEntity); ok {
		r0 = rf(name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.PostEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: id
func (_m *PostService) GetPost(id string) (*post.PostEntity, error) {
	ret := _m.Called(id)

	var r0 *post.PostEntity
	if rf, ok := ret.Get(0).(func(string) *post.PostEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.PostEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logger provides a mock function with given fields:
func (_m *PostService) Logger() logger.Logger {
	ret := _m.Called()

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func() logger.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Metadata provides a mock function with given fields:
func (_m *PostService) Metadata() component.Metadata {
	ret := _m.Called()

	var r0 component.Metadata
	if rf, ok := ret.Get(0).(func() component.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Metadata)
		}
	}

	return r0
}
