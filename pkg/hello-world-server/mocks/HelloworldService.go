// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	component "github.com/godome/godome/pkg/component"
	config "github.com/godome/godome/pkg/config"

	logger "github.com/godome/godome/pkg/logger"

	mock "github.com/stretchr/testify/mock"
)

// HelloworldService is an autogenerated mock type for the HelloworldService type
type HelloworldService struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *HelloworldService) Config() config.Config {
	ret := _m.Called()

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Config)
		}
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *HelloworldService) Logger() logger.Logger {
	ret := _m.Called()

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func() logger.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Metadata provides a mock function with given fields:
func (_m *HelloworldService) Metadata() component.Metadata {
	ret := _m.Called()

	var r0 component.Metadata
	if rf, ok := ret.Get(0).(func() component.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Metadata)
		}
	}

	return r0
}

// SayHello provides a mock function with given fields: name
func (_m *HelloworldService) SayHello(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
